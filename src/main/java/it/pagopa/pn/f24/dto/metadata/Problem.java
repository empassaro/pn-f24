package it.pagopa.pn.f24.dto.metadata;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import it.pagopa.pn.f24.dto.metadata.ProblemError;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;


import java.util.*;
import javax.annotation.Generated;

/**
 * Problem
 */
@lombok.Builder
@lombok.NoArgsConstructor
@lombok.AllArgsConstructor

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-08-18T13:00:30.717926500+02:00[Europe/Berlin]")
@lombok.ToString
public class Problem   {

  @JsonProperty("type")
  private String type;

  @JsonProperty("status")
  private Integer status;

  @JsonProperty("title")
  private String title;

  @JsonProperty("detail")
  private String detail;

  @JsonProperty("traceId")
  private String traceId;

  @JsonProperty("timestamp")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private OffsetDateTime timestamp;

  @JsonProperty("errors")
  @Valid
  private List<ProblemError> errors = new ArrayList<>();

  public Problem type(String type) {
    this.type = type;
    return this;
  }

  /**
   * URI reference of type definition
   * @return type
  */
  
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Problem status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   * minimum: 100
   * maximum: 600
   * @return status
  */
  @NotNull @Min(100) @Max(600) 
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public Problem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A short, summary of the problem type. Written in english and readable
   * @return title
  */
  @Pattern(regexp = "^[ -~]{0,64}$") @Size(max = 64) 
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Problem detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * A human readable explanation of the problem.
   * @return detail
  */
  @Pattern(regexp = "^.{0,4096}$") @Size(max = 4096) 
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }

  public Problem traceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

  /**
   * Internal support identifier associated to error
   * @return traceId
  */
  
  public String getTraceId() {
    return traceId;
  }

  public void setTraceId(String traceId) {
    this.traceId = traceId;
  }

  public Problem timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * date and time referred to UTC
   * @return timestamp
  */
  @Valid 
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public Problem errors(List<ProblemError> errors) {
    this.errors = errors;
    return this;
  }

  public Problem addErrorsItem(ProblemError errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
  */
  @NotNull @Valid @Size(min = 1) 
  public List<ProblemError> getErrors() {
    return errors;
  }

  public void setErrors(List<ProblemError> errors) {
    this.errors = errors;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Problem problem = (Problem) o;
    return Objects.equals(this.type, problem.type) &&
        Objects.equals(this.status, problem.status) &&
        Objects.equals(this.title, problem.title) &&
        Objects.equals(this.detail, problem.detail) &&
        Objects.equals(this.traceId, problem.traceId) &&
        Objects.equals(this.timestamp, problem.timestamp) &&
        Objects.equals(this.errors, problem.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, status, title, detail, traceId, timestamp, errors);
  }
}
